// source: model/nodeAddressInfo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.model.GetNodeAddressesInfoRequest', null, global);
goog.exportSymbol('proto.model.GetNodeAddressesInfoResponse', null, global);
goog.exportSymbol('proto.model.NodeAddressInfo', null, global);
goog.exportSymbol('proto.model.NodeAddressStatus', null, global);
goog.exportSymbol('proto.model.SendNodeAddressInfoRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeAddressInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeAddressInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeAddressInfo.displayName = 'proto.model.NodeAddressInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeAddressesInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetNodeAddressesInfoRequest.repeatedFields_, null);
};
goog.inherits(proto.model.GetNodeAddressesInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeAddressesInfoRequest.displayName = 'proto.model.GetNodeAddressesInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeAddressesInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetNodeAddressesInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.model.GetNodeAddressesInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeAddressesInfoResponse.displayName = 'proto.model.GetNodeAddressesInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendNodeAddressInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.SendNodeAddressInfoRequest.repeatedFields_, null);
};
goog.inherits(proto.model.SendNodeAddressInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendNodeAddressInfoRequest.displayName = 'proto.model.SendNodeAddressInfoRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeAddressInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeAddressInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeAddressInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeAddressInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockhash: msg.getBlockhash_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeAddressInfo}
 */
proto.model.NodeAddressInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeAddressInfo;
  return proto.model.NodeAddressInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeAddressInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeAddressInfo}
 */
proto.model.NodeAddressInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockheight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 6:
      var value = /** @type {!proto.model.NodeAddressStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeAddressInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeAddressInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeAddressInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeAddressInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int64 NodeID = 1;
 * @return {string}
 */
proto.model.NodeAddressInfo.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.NodeAddressInfo.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string Address = 2;
 * @return {string}
 */
proto.model.NodeAddressInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.NodeAddressInfo.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 Port = 3;
 * @return {number}
 */
proto.model.NodeAddressInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.NodeAddressInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 BlockHeight = 4;
 * @return {number}
 */
proto.model.NodeAddressInfo.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.NodeAddressInfo.prototype.setBlockheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes BlockHash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeAddressInfo.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes BlockHash = 5;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.model.NodeAddressInfo.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes BlockHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.model.NodeAddressInfo.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeAddressInfo.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional NodeAddressStatus Status = 6;
 * @return {!proto.model.NodeAddressStatus}
 */
proto.model.NodeAddressInfo.prototype.getStatus = function() {
  return /** @type {!proto.model.NodeAddressStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.model.NodeAddressStatus} value */
proto.model.NodeAddressInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bytes Signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeAddressInfo.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes Signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.model.NodeAddressInfo.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes Signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.model.NodeAddressInfo.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeAddressInfo.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetNodeAddressesInfoRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeAddressesInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeAddressesInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeAddressesInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeAddressesInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeAddressesInfoRequest}
 */
proto.model.GetNodeAddressesInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeAddressesInfoRequest;
  return proto.model.GetNodeAddressesInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeAddressesInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeAddressesInfoRequest}
 */
proto.model.GetNodeAddressesInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setNodeidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeAddressesInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeAddressesInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeAddressesInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeAddressesInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeidsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      1,
      f
    );
  }
};


/**
 * repeated int64 NodeIDs = 1;
 * @return {!Array<string>}
 */
proto.model.GetNodeAddressesInfoRequest.prototype.getNodeidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.model.GetNodeAddressesInfoRequest.prototype.setNodeidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.model.GetNodeAddressesInfoRequest.prototype.addNodeids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetNodeAddressesInfoRequest.prototype.clearNodeidsList = function() {
  this.setNodeidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetNodeAddressesInfoResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeAddressesInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeAddressesInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeAddressesInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeAddressesInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeaddressesinfoList: jspb.Message.toObjectList(msg.getNodeaddressesinfoList(),
    proto.model.NodeAddressInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeAddressesInfoResponse}
 */
proto.model.GetNodeAddressesInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeAddressesInfoResponse;
  return proto.model.GetNodeAddressesInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeAddressesInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeAddressesInfoResponse}
 */
proto.model.GetNodeAddressesInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.NodeAddressInfo;
      reader.readMessage(value,proto.model.NodeAddressInfo.deserializeBinaryFromReader);
      msg.addNodeaddressesinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeAddressesInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeAddressesInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeAddressesInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeAddressesInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeaddressesinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.NodeAddressInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeAddressInfo NodeAddressesInfo = 1;
 * @return {!Array<!proto.model.NodeAddressInfo>}
 */
proto.model.GetNodeAddressesInfoResponse.prototype.getNodeaddressesinfoList = function() {
  return /** @type{!Array<!proto.model.NodeAddressInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.NodeAddressInfo, 1));
};


/** @param {!Array<!proto.model.NodeAddressInfo>} value */
proto.model.GetNodeAddressesInfoResponse.prototype.setNodeaddressesinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.NodeAddressInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.NodeAddressInfo}
 */
proto.model.GetNodeAddressesInfoResponse.prototype.addNodeaddressesinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.NodeAddressInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetNodeAddressesInfoResponse.prototype.clearNodeaddressesinfoList = function() {
  this.setNodeaddressesinfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.SendNodeAddressInfoRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendNodeAddressInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendNodeAddressInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendNodeAddressInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendNodeAddressInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeaddressinfomessageList: jspb.Message.toObjectList(msg.getNodeaddressinfomessageList(),
    proto.model.NodeAddressInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendNodeAddressInfoRequest}
 */
proto.model.SendNodeAddressInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendNodeAddressInfoRequest;
  return proto.model.SendNodeAddressInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendNodeAddressInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendNodeAddressInfoRequest}
 */
proto.model.SendNodeAddressInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.NodeAddressInfo;
      reader.readMessage(value,proto.model.NodeAddressInfo.deserializeBinaryFromReader);
      msg.addNodeaddressinfomessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendNodeAddressInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendNodeAddressInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendNodeAddressInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendNodeAddressInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeaddressinfomessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.NodeAddressInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeAddressInfo NodeAddressInfoMessage = 1;
 * @return {!Array<!proto.model.NodeAddressInfo>}
 */
proto.model.SendNodeAddressInfoRequest.prototype.getNodeaddressinfomessageList = function() {
  return /** @type{!Array<!proto.model.NodeAddressInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.NodeAddressInfo, 1));
};


/** @param {!Array<!proto.model.NodeAddressInfo>} value */
proto.model.SendNodeAddressInfoRequest.prototype.setNodeaddressinfomessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.NodeAddressInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.NodeAddressInfo}
 */
proto.model.SendNodeAddressInfoRequest.prototype.addNodeaddressinfomessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.NodeAddressInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.SendNodeAddressInfoRequest.prototype.clearNodeaddressinfomessageList = function() {
  this.setNodeaddressinfomessageList([]);
};


/**
 * @enum {number}
 */
proto.model.NodeAddressStatus = {
  UNSET: 0,
  NODEADDRESSPENDING: 1,
  NODEADDRESSCONFIRMED: 2
};

goog.object.extend(exports, proto.model);
