// source: model/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_proofOfOwnership_pb = require('../model/proofOfOwnership_pb.js');
goog.object.extend(proto, model_proofOfOwnership_pb);
var model_pagination_pb = require('../model/pagination_pb.js');
goog.object.extend(proto, model_pagination_pb);
var model_batchReceipt_pb = require('../model/batchReceipt_pb.js');
goog.object.extend(proto, model_batchReceipt_pb);
var model_nodeRegistration_pb = require('../model/nodeRegistration_pb.js');
goog.object.extend(proto, model_nodeRegistration_pb);
var model_escrow_pb = require('../model/escrow_pb.js');
goog.object.extend(proto, model_escrow_pb);
var model_multiSignature_pb = require('../model/multiSignature_pb.js');
goog.object.extend(proto, model_multiSignature_pb);
goog.exportSymbol('proto.model.ApprovalEscrowTransactionBody', null, global);
goog.exportSymbol('proto.model.ClaimNodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.EmptyTransactionBody', null, global);
goog.exportSymbol('proto.model.GetTransactionMinimumFeeRequest', null, global);
goog.exportSymbol('proto.model.GetTransactionMinimumFeeResponse', null, global);
goog.exportSymbol('proto.model.GetTransactionRequest', null, global);
goog.exportSymbol('proto.model.GetTransactionsRequest', null, global);
goog.exportSymbol('proto.model.GetTransactionsResponse', null, global);
goog.exportSymbol('proto.model.MultiSignatureTransactionBody', null, global);
goog.exportSymbol('proto.model.NodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.PostTransactionRequest', null, global);
goog.exportSymbol('proto.model.PostTransactionResponse', null, global);
goog.exportSymbol('proto.model.RemoveAccountDatasetTransactionBody', null, global);
goog.exportSymbol('proto.model.RemoveNodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.RequestBlockTransactionsRequest', null, global);
goog.exportSymbol('proto.model.SendBlockTransactionsRequest', null, global);
goog.exportSymbol('proto.model.SendBlockTransactionsResponse', null, global);
goog.exportSymbol('proto.model.SendMoneyTransactionBody', null, global);
goog.exportSymbol('proto.model.SendTransactionRequest', null, global);
goog.exportSymbol('proto.model.SendTransactionResponse', null, global);
goog.exportSymbol('proto.model.SetupAccountDatasetTransactionBody', null, global);
goog.exportSymbol('proto.model.Transaction', null, global);
goog.exportSymbol('proto.model.Transaction.TransactionbodyCase', null, global);
goog.exportSymbol('proto.model.TransactionType', null, global);
goog.exportSymbol('proto.model.UpdateNodeRegistrationTransactionBody', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.Transaction.oneofGroups_);
};
goog.inherits(proto.model.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.Transaction.displayName = 'proto.model.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EmptyTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EmptyTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.EmptyTransactionBody.displayName = 'proto.model.EmptyTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendMoneyTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendMoneyTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendMoneyTransactionBody.displayName = 'proto.model.SendMoneyTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeRegistrationTransactionBody.displayName = 'proto.model.NodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.UpdateNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.UpdateNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.UpdateNodeRegistrationTransactionBody.displayName = 'proto.model.UpdateNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RemoveNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RemoveNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RemoveNodeRegistrationTransactionBody.displayName = 'proto.model.RemoveNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ClaimNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ClaimNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.ClaimNodeRegistrationTransactionBody.displayName = 'proto.model.ClaimNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SetupAccountDatasetTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SetupAccountDatasetTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SetupAccountDatasetTransactionBody.displayName = 'proto.model.SetupAccountDatasetTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RemoveAccountDatasetTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RemoveAccountDatasetTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RemoveAccountDatasetTransactionBody.displayName = 'proto.model.RemoveAccountDatasetTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ApprovalEscrowTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ApprovalEscrowTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.ApprovalEscrowTransactionBody.displayName = 'proto.model.ApprovalEscrowTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MultiSignatureTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MultiSignatureTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.MultiSignatureTransactionBody.displayName = 'proto.model.MultiSignatureTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionRequest.displayName = 'proto.model.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionsRequest.displayName = 'proto.model.GetTransactionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.model.GetTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionsResponse.displayName = 'proto.model.GetTransactionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PostTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PostTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PostTransactionRequest.displayName = 'proto.model.PostTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PostTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PostTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PostTransactionResponse.displayName = 'proto.model.PostTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendTransactionRequest.displayName = 'proto.model.SendTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendTransactionResponse.displayName = 'proto.model.SendTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RequestBlockTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.RequestBlockTransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.model.RequestBlockTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RequestBlockTransactionsRequest.displayName = 'proto.model.RequestBlockTransactionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendBlockTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.SendBlockTransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.model.SendBlockTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendBlockTransactionsRequest.displayName = 'proto.model.SendBlockTransactionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendBlockTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.SendBlockTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.model.SendBlockTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendBlockTransactionsResponse.displayName = 'proto.model.SendBlockTransactionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionMinimumFeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionMinimumFeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionMinimumFeeRequest.displayName = 'proto.model.GetTransactionMinimumFeeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionMinimumFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionMinimumFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionMinimumFeeResponse.displayName = 'proto.model.GetTransactionMinimumFeeResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.Transaction.oneofGroups_ = [[15,16,17,18,19,20,21,22,23,24]];

/**
 * @enum {number}
 */
proto.model.Transaction.TransactionbodyCase = {
  TRANSACTIONBODY_NOT_SET: 0,
  EMPTYTRANSACTIONBODY: 15,
  SENDMONEYTRANSACTIONBODY: 16,
  NODEREGISTRATIONTRANSACTIONBODY: 17,
  UPDATENODEREGISTRATIONTRANSACTIONBODY: 18,
  REMOVENODEREGISTRATIONTRANSACTIONBODY: 19,
  CLAIMNODEREGISTRATIONTRANSACTIONBODY: 20,
  SETUPACCOUNTDATASETTRANSACTIONBODY: 21,
  REMOVEACCOUNTDATASETTRANSACTIONBODY: 22,
  APPROVALESCROWTRANSACTIONBODY: 23,
  MULTISIGNATURETRANSACTIONBODY: 24
};

/**
 * @return {proto.model.Transaction.TransactionbodyCase}
 */
proto.model.Transaction.prototype.getTransactionbodyCase = function() {
  return /** @type {proto.model.Transaction.TransactionbodyCase} */(jspb.Message.computeOneofCase(this, proto.model.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    blockid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    senderaccountaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recipientaccountaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactiontype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    transactionhash: msg.getTransactionhash_asB64(),
    transactionbodylength: jspb.Message.getFieldWithDefault(msg, 11, 0),
    transactionbodybytes: msg.getTransactionbodybytes_asB64(),
    transactionindex: jspb.Message.getFieldWithDefault(msg, 13, 0),
    multisigchild: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    emptytransactionbody: (f = msg.getEmptytransactionbody()) && proto.model.EmptyTransactionBody.toObject(includeInstance, f),
    sendmoneytransactionbody: (f = msg.getSendmoneytransactionbody()) && proto.model.SendMoneyTransactionBody.toObject(includeInstance, f),
    noderegistrationtransactionbody: (f = msg.getNoderegistrationtransactionbody()) && proto.model.NodeRegistrationTransactionBody.toObject(includeInstance, f),
    updatenoderegistrationtransactionbody: (f = msg.getUpdatenoderegistrationtransactionbody()) && proto.model.UpdateNodeRegistrationTransactionBody.toObject(includeInstance, f),
    removenoderegistrationtransactionbody: (f = msg.getRemovenoderegistrationtransactionbody()) && proto.model.RemoveNodeRegistrationTransactionBody.toObject(includeInstance, f),
    claimnoderegistrationtransactionbody: (f = msg.getClaimnoderegistrationtransactionbody()) && proto.model.ClaimNodeRegistrationTransactionBody.toObject(includeInstance, f),
    setupaccountdatasettransactionbody: (f = msg.getSetupaccountdatasettransactionbody()) && proto.model.SetupAccountDatasetTransactionBody.toObject(includeInstance, f),
    removeaccountdatasettransactionbody: (f = msg.getRemoveaccountdatasettransactionbody()) && proto.model.RemoveAccountDatasetTransactionBody.toObject(includeInstance, f),
    approvalescrowtransactionbody: (f = msg.getApprovalescrowtransactionbody()) && proto.model.ApprovalEscrowTransactionBody.toObject(includeInstance, f),
    multisignaturetransactionbody: (f = msg.getMultisignaturetransactionbody()) && proto.model.MultiSignatureTransactionBody.toObject(includeInstance, f),
    signature: msg.getSignature_asB64(),
    escrow: (f = msg.getEscrow()) && model_escrow_pb.Escrow.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Transaction}
 */
proto.model.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Transaction;
  return proto.model.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Transaction}
 */
proto.model.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBlockid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderaccountaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientaccountaddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactiontype(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFee(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionhash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionbodylength(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbodybytes(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionindex(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultisigchild(value);
      break;
    case 15:
      var value = new proto.model.EmptyTransactionBody;
      reader.readMessage(value,proto.model.EmptyTransactionBody.deserializeBinaryFromReader);
      msg.setEmptytransactionbody(value);
      break;
    case 16:
      var value = new proto.model.SendMoneyTransactionBody;
      reader.readMessage(value,proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader);
      msg.setSendmoneytransactionbody(value);
      break;
    case 17:
      var value = new proto.model.NodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setNoderegistrationtransactionbody(value);
      break;
    case 18:
      var value = new proto.model.UpdateNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setUpdatenoderegistrationtransactionbody(value);
      break;
    case 19:
      var value = new proto.model.RemoveNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setRemovenoderegistrationtransactionbody(value);
      break;
    case 20:
      var value = new proto.model.ClaimNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setClaimnoderegistrationtransactionbody(value);
      break;
    case 21:
      var value = new proto.model.SetupAccountDatasetTransactionBody;
      reader.readMessage(value,proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader);
      msg.setSetupaccountdatasettransactionbody(value);
      break;
    case 22:
      var value = new proto.model.RemoveAccountDatasetTransactionBody;
      reader.readMessage(value,proto.model.RemoveAccountDatasetTransactionBody.deserializeBinaryFromReader);
      msg.setRemoveaccountdatasettransactionbody(value);
      break;
    case 23:
      var value = new proto.model.ApprovalEscrowTransactionBody;
      reader.readMessage(value,proto.model.ApprovalEscrowTransactionBody.deserializeBinaryFromReader);
      msg.setApprovalescrowtransactionbody(value);
      break;
    case 24:
      var value = new proto.model.MultiSignatureTransactionBody;
      reader.readMessage(value,proto.model.MultiSignatureTransactionBody.deserializeBinaryFromReader);
      msg.setMultisignaturetransactionbody(value);
      break;
    case 25:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 26:
      var value = new model_escrow_pb.Escrow;
      reader.readMessage(value,model_escrow_pb.Escrow.deserializeBinaryFromReader);
      msg.setEscrow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getBlockid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSenderaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecipientaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactiontype();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getFee();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getTransactionhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTransactionbodylength();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTransactionbodybytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getTransactionindex();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getMultisigchild();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getEmptytransactionbody();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.model.EmptyTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSendmoneytransactionbody();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.model.SendMoneyTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getNoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getUpdatenoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getRemovenoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getClaimnoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSetupaccountdatasettransactionbody();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getRemoveaccountdatasettransactionbody();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.model.RemoveAccountDatasetTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getApprovalescrowtransactionbody();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.model.ApprovalEscrowTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getMultisignaturetransactionbody();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.model.MultiSignatureTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      25,
      f
    );
  }
  f = message.getEscrow();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      model_escrow_pb.Escrow.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 Version = 1;
 * @return {number}
 */
proto.model.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ID = 2;
 * @return {string}
 */
proto.model.Transaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 BlockID = 3;
 * @return {string}
 */
proto.model.Transaction.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setBlockid = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint32 Height = 4;
 * @return {number}
 */
proto.model.Transaction.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string SenderAccountAddress = 5;
 * @return {string}
 */
proto.model.Transaction.prototype.getSenderaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Transaction.prototype.setSenderaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string RecipientAccountAddress = 6;
 * @return {string}
 */
proto.model.Transaction.prototype.getRecipientaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.Transaction.prototype.setRecipientaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 TransactionType = 7;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactiontype = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 Fee = 8;
 * @return {string}
 */
proto.model.Transaction.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setFee = function(value) {
  jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional int64 Timestamp = 9;
 * @return {string}
 */
proto.model.Transaction.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional bytes TransactionHash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getTransactionhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes TransactionHash = 10;
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {string}
 */
proto.model.Transaction.prototype.getTransactionhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionhash()));
};


/**
 * optional bytes TransactionHash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getTransactionhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setTransactionhash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint32 TransactionBodyLength = 11;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactionbodylength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactionbodylength = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getTransactionbodybytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * This is a type-conversion wrapper around `getTransactionbodybytes()`
 * @return {string}
 */
proto.model.Transaction.prototype.getTransactionbodybytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbodybytes()));
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbodybytes()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getTransactionbodybytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbodybytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setTransactionbodybytes = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional uint32 TransactionIndex = 13;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactionindex = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool MultisigChild = 14;
 * @return {boolean}
 */
proto.model.Transaction.prototype.getMultisigchild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.model.Transaction.prototype.setMultisigchild = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional EmptyTransactionBody emptyTransactionBody = 15;
 * @return {?proto.model.EmptyTransactionBody}
 */
proto.model.Transaction.prototype.getEmptytransactionbody = function() {
  return /** @type{?proto.model.EmptyTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.EmptyTransactionBody, 15));
};


/** @param {?proto.model.EmptyTransactionBody|undefined} value */
proto.model.Transaction.prototype.setEmptytransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearEmptytransactionbody = function() {
  this.setEmptytransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasEmptytransactionbody = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SendMoneyTransactionBody sendMoneyTransactionBody = 16;
 * @return {?proto.model.SendMoneyTransactionBody}
 */
proto.model.Transaction.prototype.getSendmoneytransactionbody = function() {
  return /** @type{?proto.model.SendMoneyTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.SendMoneyTransactionBody, 16));
};


/** @param {?proto.model.SendMoneyTransactionBody|undefined} value */
proto.model.Transaction.prototype.setSendmoneytransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearSendmoneytransactionbody = function() {
  this.setSendmoneytransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasSendmoneytransactionbody = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NodeRegistrationTransactionBody nodeRegistrationTransactionBody = 17;
 * @return {?proto.model.NodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getNoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.NodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeRegistrationTransactionBody, 17));
};


/** @param {?proto.model.NodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setNoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearNoderegistrationtransactionbody = function() {
  this.setNoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasNoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional UpdateNodeRegistrationTransactionBody updateNodeRegistrationTransactionBody = 18;
 * @return {?proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getUpdatenoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.UpdateNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.UpdateNodeRegistrationTransactionBody, 18));
};


/** @param {?proto.model.UpdateNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setUpdatenoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearUpdatenoderegistrationtransactionbody = function() {
  this.setUpdatenoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasUpdatenoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RemoveNodeRegistrationTransactionBody removeNodeRegistrationTransactionBody = 19;
 * @return {?proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getRemovenoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.RemoveNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.RemoveNodeRegistrationTransactionBody, 19));
};


/** @param {?proto.model.RemoveNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setRemovenoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearRemovenoderegistrationtransactionbody = function() {
  this.setRemovenoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasRemovenoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ClaimNodeRegistrationTransactionBody claimNodeRegistrationTransactionBody = 20;
 * @return {?proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getClaimnoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.ClaimNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.ClaimNodeRegistrationTransactionBody, 20));
};


/** @param {?proto.model.ClaimNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setClaimnoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearClaimnoderegistrationtransactionbody = function() {
  this.setClaimnoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasClaimnoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SetupAccountDatasetTransactionBody setupAccountDatasetTransactionBody = 21;
 * @return {?proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.Transaction.prototype.getSetupaccountdatasettransactionbody = function() {
  return /** @type{?proto.model.SetupAccountDatasetTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.SetupAccountDatasetTransactionBody, 21));
};


/** @param {?proto.model.SetupAccountDatasetTransactionBody|undefined} value */
proto.model.Transaction.prototype.setSetupaccountdatasettransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearSetupaccountdatasettransactionbody = function() {
  this.setSetupaccountdatasettransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasSetupaccountdatasettransactionbody = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional RemoveAccountDatasetTransactionBody removeAccountDatasetTransactionBody = 22;
 * @return {?proto.model.RemoveAccountDatasetTransactionBody}
 */
proto.model.Transaction.prototype.getRemoveaccountdatasettransactionbody = function() {
  return /** @type{?proto.model.RemoveAccountDatasetTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.RemoveAccountDatasetTransactionBody, 22));
};


/** @param {?proto.model.RemoveAccountDatasetTransactionBody|undefined} value */
proto.model.Transaction.prototype.setRemoveaccountdatasettransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearRemoveaccountdatasettransactionbody = function() {
  this.setRemoveaccountdatasettransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasRemoveaccountdatasettransactionbody = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ApprovalEscrowTransactionBody approvalEscrowTransactionBody = 23;
 * @return {?proto.model.ApprovalEscrowTransactionBody}
 */
proto.model.Transaction.prototype.getApprovalescrowtransactionbody = function() {
  return /** @type{?proto.model.ApprovalEscrowTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.ApprovalEscrowTransactionBody, 23));
};


/** @param {?proto.model.ApprovalEscrowTransactionBody|undefined} value */
proto.model.Transaction.prototype.setApprovalescrowtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearApprovalescrowtransactionbody = function() {
  this.setApprovalescrowtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasApprovalescrowtransactionbody = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional MultiSignatureTransactionBody multiSignatureTransactionBody = 24;
 * @return {?proto.model.MultiSignatureTransactionBody}
 */
proto.model.Transaction.prototype.getMultisignaturetransactionbody = function() {
  return /** @type{?proto.model.MultiSignatureTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.MultiSignatureTransactionBody, 24));
};


/** @param {?proto.model.MultiSignatureTransactionBody|undefined} value */
proto.model.Transaction.prototype.setMultisignaturetransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearMultisignaturetransactionbody = function() {
  this.setMultisignaturetransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasMultisignaturetransactionbody = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bytes Signature = 25;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * optional bytes Signature = 25;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.model.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes Signature = 25;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 25, value);
};


/**
 * optional Escrow Escrow = 26;
 * @return {?proto.model.Escrow}
 */
proto.model.Transaction.prototype.getEscrow = function() {
  return /** @type{?proto.model.Escrow} */ (
    jspb.Message.getWrapperField(this, model_escrow_pb.Escrow, 26));
};


/** @param {?proto.model.Escrow|undefined} value */
proto.model.Transaction.prototype.setEscrow = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearEscrow = function() {
  this.setEscrow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasEscrow = function() {
  return jspb.Message.getField(this, 26) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EmptyTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EmptyTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EmptyTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EmptyTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EmptyTransactionBody}
 */
proto.model.EmptyTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EmptyTransactionBody;
  return proto.model.EmptyTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EmptyTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EmptyTransactionBody}
 */
proto.model.EmptyTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EmptyTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EmptyTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EmptyTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EmptyTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendMoneyTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendMoneyTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendMoneyTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendMoneyTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendMoneyTransactionBody}
 */
proto.model.SendMoneyTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendMoneyTransactionBody;
  return proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendMoneyTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendMoneyTransactionBody}
 */
proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendMoneyTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendMoneyTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendMoneyTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendMoneyTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 Amount = 1;
 * @return {string}
 */
proto.model.SendMoneyTransactionBody.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.SendMoneyTransactionBody.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeaddress: (f = msg.getNodeaddress()) && model_nodeRegistration_pb.NodeAddress.toObject(includeInstance, f),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeRegistrationTransactionBody}
 */
proto.model.NodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeRegistrationTransactionBody;
  return proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeRegistrationTransactionBody}
 */
proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = new model_nodeRegistration_pb.NodeAddress;
      reader.readMessage(value,model_nodeRegistration_pb.NodeAddress.deserializeBinaryFromReader);
      msg.setNodeaddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 5:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeaddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_nodeRegistration_pb.NodeAddress.serializeBinaryToWriter
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.NodeRegistrationTransactionBody.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeAddress NodeAddress = 3;
 * @return {?proto.model.NodeAddress}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodeaddress = function() {
  return /** @type{?proto.model.NodeAddress} */ (
    jspb.Message.getWrapperField(this, model_nodeRegistration_pb.NodeAddress, 3));
};


/** @param {?proto.model.NodeAddress|undefined} value */
proto.model.NodeRegistrationTransactionBody.prototype.setNodeaddress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeRegistrationTransactionBody.prototype.clearNodeaddress = function() {
  this.setNodeaddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeRegistrationTransactionBody.prototype.hasNodeaddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 LockedBalance = 4;
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.model.NodeRegistrationTransactionBody.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional ProofOfOwnership Poown = 5;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 5));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.NodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.UpdateNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpdateNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    nodeaddress: (f = msg.getNodeaddress()) && model_nodeRegistration_pb.NodeAddress.toObject(includeInstance, f),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.UpdateNodeRegistrationTransactionBody;
  return proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = new model_nodeRegistration_pb.NodeAddress;
      reader.readMessage(value,model_nodeRegistration_pb.NodeAddress.deserializeBinaryFromReader);
      msg.setNodeaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 4:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNodeaddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_nodeRegistration_pb.NodeAddress.serializeBinaryToWriter
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional NodeAddress NodeAddress = 2;
 * @return {?proto.model.NodeAddress}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodeaddress = function() {
  return /** @type{?proto.model.NodeAddress} */ (
    jspb.Message.getWrapperField(this, model_nodeRegistration_pb.NodeAddress, 2));
};


/** @param {?proto.model.NodeAddress|undefined} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setNodeaddress = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.clearNodeaddress = function() {
  this.setNodeaddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.hasNodeaddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 LockedBalance = 3;
 * @return {string}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional ProofOfOwnership Poown = 4;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 4));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RemoveNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RemoveNodeRegistrationTransactionBody;
  return proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ClaimNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ClaimNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ClaimNodeRegistrationTransactionBody;
  return proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ProofOfOwnership Poown = 2;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 2));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SetupAccountDatasetTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SetupAccountDatasetTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SetupAccountDatasetTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    setteraccountaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipientaccountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    property: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    muchtime: jspb.Message.getFieldWithDefault(msg, 5, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.SetupAccountDatasetTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SetupAccountDatasetTransactionBody;
  return proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SetupAccountDatasetTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetteraccountaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientaccountaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMuchtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SetupAccountDatasetTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetteraccountaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProperty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMuchtime();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
};


/**
 * optional string SetterAccountAddress = 1;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getSetteraccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setSetteraccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RecipientAccountAddress = 2;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getRecipientaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setRecipientaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Property = 3;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setProperty = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Value = 4;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 MuchTime = 5;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getMuchtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setMuchtime = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RemoveAccountDatasetTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RemoveAccountDatasetTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveAccountDatasetTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    setteraccountaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipientaccountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    property: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RemoveAccountDatasetTransactionBody}
 */
proto.model.RemoveAccountDatasetTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RemoveAccountDatasetTransactionBody;
  return proto.model.RemoveAccountDatasetTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RemoveAccountDatasetTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RemoveAccountDatasetTransactionBody}
 */
proto.model.RemoveAccountDatasetTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetteraccountaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientaccountaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RemoveAccountDatasetTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RemoveAccountDatasetTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveAccountDatasetTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetteraccountaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProperty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string SetterAccountAddress = 1;
 * @return {string}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.getSetteraccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.RemoveAccountDatasetTransactionBody.prototype.setSetteraccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RecipientAccountAddress = 2;
 * @return {string}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.getRecipientaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.RemoveAccountDatasetTransactionBody.prototype.setRecipientaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Property = 3;
 * @return {string}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.RemoveAccountDatasetTransactionBody.prototype.setProperty = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Value = 4;
 * @return {string}
 */
proto.model.RemoveAccountDatasetTransactionBody.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.RemoveAccountDatasetTransactionBody.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ApprovalEscrowTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ApprovalEscrowTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ApprovalEscrowTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ApprovalEscrowTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    approval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ApprovalEscrowTransactionBody}
 */
proto.model.ApprovalEscrowTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ApprovalEscrowTransactionBody;
  return proto.model.ApprovalEscrowTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ApprovalEscrowTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ApprovalEscrowTransactionBody}
 */
proto.model.ApprovalEscrowTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.model.EscrowApproval} */ (reader.readEnum());
      msg.setApproval(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTransactionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ApprovalEscrowTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ApprovalEscrowTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ApprovalEscrowTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ApprovalEscrowTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApproval();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTransactionid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional EscrowApproval Approval = 1;
 * @return {!proto.model.EscrowApproval}
 */
proto.model.ApprovalEscrowTransactionBody.prototype.getApproval = function() {
  return /** @type {!proto.model.EscrowApproval} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.model.EscrowApproval} value */
proto.model.ApprovalEscrowTransactionBody.prototype.setApproval = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 TransactionID = 2;
 * @return {string}
 */
proto.model.ApprovalEscrowTransactionBody.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.ApprovalEscrowTransactionBody.prototype.setTransactionid = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MultiSignatureTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MultiSignatureTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MultiSignatureTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MultiSignatureTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    multisignatureinfo: (f = msg.getMultisignatureinfo()) && model_multiSignature_pb.MultiSignatureInfo.toObject(includeInstance, f),
    unsignedtransactionbytes: msg.getUnsignedtransactionbytes_asB64(),
    signatureinfo: (f = msg.getSignatureinfo()) && model_multiSignature_pb.SignatureInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MultiSignatureTransactionBody}
 */
proto.model.MultiSignatureTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MultiSignatureTransactionBody;
  return proto.model.MultiSignatureTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MultiSignatureTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MultiSignatureTransactionBody}
 */
proto.model.MultiSignatureTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_multiSignature_pb.MultiSignatureInfo;
      reader.readMessage(value,model_multiSignature_pb.MultiSignatureInfo.deserializeBinaryFromReader);
      msg.setMultisignatureinfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnsignedtransactionbytes(value);
      break;
    case 3:
      var value = new model_multiSignature_pb.SignatureInfo;
      reader.readMessage(value,model_multiSignature_pb.SignatureInfo.deserializeBinaryFromReader);
      msg.setSignatureinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MultiSignatureTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MultiSignatureTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MultiSignatureTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MultiSignatureTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMultisignatureinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_multiSignature_pb.MultiSignatureInfo.serializeBinaryToWriter
    );
  }
  f = message.getUnsignedtransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignatureinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_multiSignature_pb.SignatureInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MultiSignatureInfo MultiSignatureInfo = 1;
 * @return {?proto.model.MultiSignatureInfo}
 */
proto.model.MultiSignatureTransactionBody.prototype.getMultisignatureinfo = function() {
  return /** @type{?proto.model.MultiSignatureInfo} */ (
    jspb.Message.getWrapperField(this, model_multiSignature_pb.MultiSignatureInfo, 1));
};


/** @param {?proto.model.MultiSignatureInfo|undefined} value */
proto.model.MultiSignatureTransactionBody.prototype.setMultisignatureinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.MultiSignatureTransactionBody.prototype.clearMultisignatureinfo = function() {
  this.setMultisignatureinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.MultiSignatureTransactionBody.prototype.hasMultisignatureinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes UnsignedTransactionBytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.model.MultiSignatureTransactionBody.prototype.getUnsignedtransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes UnsignedTransactionBytes = 2;
 * This is a type-conversion wrapper around `getUnsignedtransactionbytes()`
 * @return {string}
 */
proto.model.MultiSignatureTransactionBody.prototype.getUnsignedtransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnsignedtransactionbytes()));
};


/**
 * optional bytes UnsignedTransactionBytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnsignedtransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.MultiSignatureTransactionBody.prototype.getUnsignedtransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnsignedtransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.MultiSignatureTransactionBody.prototype.setUnsignedtransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional SignatureInfo SignatureInfo = 3;
 * @return {?proto.model.SignatureInfo}
 */
proto.model.MultiSignatureTransactionBody.prototype.getSignatureinfo = function() {
  return /** @type{?proto.model.SignatureInfo} */ (
    jspb.Message.getWrapperField(this, model_multiSignature_pb.SignatureInfo, 3));
};


/** @param {?proto.model.SignatureInfo|undefined} value */
proto.model.MultiSignatureTransactionBody.prototype.setSignatureinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.MultiSignatureTransactionBody.prototype.clearSignatureinfo = function() {
  this.setSignatureinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.MultiSignatureTransactionBody.prototype.hasSignatureinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionRequest}
 */
proto.model.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionRequest;
  return proto.model.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionRequest}
 */
proto.model.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {string}
 */
proto.model.GetTransactionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetTransactionRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestampstart: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    timestampend: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    transactiontype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pagination: (f = msg.getPagination()) && model_pagination_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionsRequest}
 */
proto.model.GetTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionsRequest;
  return proto.model.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionsRequest}
 */
proto.model.GetTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestampstart(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestampend(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactiontype(value);
      break;
    case 6:
      var value = new model_pagination_pb.Pagination;
      reader.readMessage(value,model_pagination_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimestampstart();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getTimestampend();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getTransactiontype();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      model_pagination_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string AccountAddress = 1;
 * @return {string}
 */
proto.model.GetTransactionsRequest.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.GetTransactionsRequest.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 Height = 2;
 * @return {number}
 */
proto.model.GetTransactionsRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.GetTransactionsRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 TimestampStart = 3;
 * @return {string}
 */
proto.model.GetTransactionsRequest.prototype.getTimestampstart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.GetTransactionsRequest.prototype.setTimestampstart = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int64 TimestampEnd = 4;
 * @return {string}
 */
proto.model.GetTransactionsRequest.prototype.getTimestampend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.model.GetTransactionsRequest.prototype.setTimestampend = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint32 TransactionType = 5;
 * @return {number}
 */
proto.model.GetTransactionsRequest.prototype.getTransactiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.model.GetTransactionsRequest.prototype.setTransactiontype = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Pagination Pagination = 6;
 * @return {?proto.model.Pagination}
 */
proto.model.GetTransactionsRequest.prototype.getPagination = function() {
  return /** @type{?proto.model.Pagination} */ (
    jspb.Message.getWrapperField(this, model_pagination_pb.Pagination, 6));
};


/** @param {?proto.model.Pagination|undefined} value */
proto.model.GetTransactionsRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.GetTransactionsRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.GetTransactionsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetTransactionsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.model.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionsResponse}
 */
proto.model.GetTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionsResponse;
  return proto.model.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionsResponse}
 */
proto.model.GetTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTotal(value);
      break;
    case 2:
      var value = new proto.model.Transaction;
      reader.readMessage(value,proto.model.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Total = 1;
 * @return {string}
 */
proto.model.GetTransactionsResponse.prototype.getTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetTransactionsResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * repeated Transaction Transactions = 2;
 * @return {!Array<!proto.model.Transaction>}
 */
proto.model.GetTransactionsResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.model.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Transaction, 2));
};


/** @param {!Array<!proto.model.Transaction>} value */
proto.model.GetTransactionsResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Transaction}
 */
proto.model.GetTransactionsResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetTransactionsResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PostTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PostTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PostTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionbytes: msg.getTransactionbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PostTransactionRequest}
 */
proto.model.PostTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PostTransactionRequest;
  return proto.model.PostTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PostTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PostTransactionRequest}
 */
proto.model.PostTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PostTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PostTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PostTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes TransactionBytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TransactionBytes = 1;
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {string}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbytes()));
};


/**
 * optional bytes TransactionBytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.PostTransactionRequest.prototype.setTransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PostTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PostTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PostTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.model.Transaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PostTransactionResponse}
 */
proto.model.PostTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PostTransactionResponse;
  return proto.model.PostTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PostTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PostTransactionResponse}
 */
proto.model.PostTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Transaction;
      reader.readMessage(value,proto.model.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PostTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PostTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PostTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction Transaction = 1;
 * @return {?proto.model.Transaction}
 */
proto.model.PostTransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.model.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.model.Transaction, 1));
};


/** @param {?proto.model.Transaction|undefined} value */
proto.model.PostTransactionResponse.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.PostTransactionResponse.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.PostTransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionbytes: msg.getTransactionbytes_asB64(),
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    senderpublickey: msg.getSenderpublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendTransactionRequest}
 */
proto.model.SendTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendTransactionRequest;
  return proto.model.SendTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendTransactionRequest}
 */
proto.model.SendTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSenderpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes TransactionBytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TransactionBytes = 1;
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {string}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbytes()));
};


/**
 * optional bytes TransactionBytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.SendTransactionRequest.prototype.setTransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 ChainType = 2;
 * @return {number}
 */
proto.model.SendTransactionRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.SendTransactionRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes SenderPublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.model.SendTransactionRequest.prototype.getSenderpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes SenderPublicKey = 3;
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {string}
 */
proto.model.SendTransactionRequest.prototype.getSenderpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderpublickey()));
};


/**
 * optional bytes SenderPublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {!Uint8Array}
 */
proto.model.SendTransactionRequest.prototype.getSenderpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.SendTransactionRequest.prototype.setSenderpublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchreceipt: (f = msg.getBatchreceipt()) && model_batchReceipt_pb.BatchReceipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendTransactionResponse}
 */
proto.model.SendTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendTransactionResponse;
  return proto.model.SendTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendTransactionResponse}
 */
proto.model.SendTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_batchReceipt_pb.BatchReceipt;
      reader.readMessage(value,model_batchReceipt_pb.BatchReceipt.deserializeBinaryFromReader);
      msg.setBatchreceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchreceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_batchReceipt_pb.BatchReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchReceipt BatchReceipt = 1;
 * @return {?proto.model.BatchReceipt}
 */
proto.model.SendTransactionResponse.prototype.getBatchreceipt = function() {
  return /** @type{?proto.model.BatchReceipt} */ (
    jspb.Message.getWrapperField(this, model_batchReceipt_pb.BatchReceipt, 1));
};


/** @param {?proto.model.BatchReceipt|undefined} value */
proto.model.SendTransactionResponse.prototype.setBatchreceipt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.SendTransactionResponse.prototype.clearBatchreceipt = function() {
  this.setBatchreceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.SendTransactionResponse.prototype.hasBatchreceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.RequestBlockTransactionsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RequestBlockTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RequestBlockTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RequestBlockTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RequestBlockTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockid: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RequestBlockTransactionsRequest}
 */
proto.model.RequestBlockTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RequestBlockTransactionsRequest;
  return proto.model.RequestBlockTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RequestBlockTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RequestBlockTransactionsRequest}
 */
proto.model.RequestBlockTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setTransactionidsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RequestBlockTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RequestBlockTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RequestBlockTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RequestBlockTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBlockid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * repeated int64 TransactionIDs = 1;
 * @return {!Array<number>}
 */
proto.model.RequestBlockTransactionsRequest.prototype.getTransactionidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.model.RequestBlockTransactionsRequest.prototype.setTransactionidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.model.RequestBlockTransactionsRequest.prototype.addTransactionids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.RequestBlockTransactionsRequest.prototype.clearTransactionidsList = function() {
  this.setTransactionidsList([]);
};


/**
 * optional int32 ChainType = 2;
 * @return {number}
 */
proto.model.RequestBlockTransactionsRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.RequestBlockTransactionsRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 BlockID = 3;
 * @return {string}
 */
proto.model.RequestBlockTransactionsRequest.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.RequestBlockTransactionsRequest.prototype.setBlockid = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.SendBlockTransactionsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendBlockTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendBlockTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendBlockTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionsbytesList: msg.getTransactionsbytesList_asB64(),
    senderpublickey: msg.getSenderpublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendBlockTransactionsRequest}
 */
proto.model.SendBlockTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendBlockTransactionsRequest;
  return proto.model.SendBlockTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendBlockTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendBlockTransactionsRequest}
 */
proto.model.SendBlockTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionsbytes(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendBlockTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendBlockTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendBlockTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTransactionsbytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getSenderpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.SendBlockTransactionsRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.SendBlockTransactionsRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes TransactionsBytes = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.model.SendBlockTransactionsRequest.prototype.getTransactionsbytesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes TransactionsBytes = 2;
 * This is a type-conversion wrapper around `getTransactionsbytesList()`
 * @return {!Array<string>}
 */
proto.model.SendBlockTransactionsRequest.prototype.getTransactionsbytesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsbytesList()));
};


/**
 * repeated bytes TransactionsBytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsbytesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.model.SendBlockTransactionsRequest.prototype.getTransactionsbytesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsbytesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.model.SendBlockTransactionsRequest.prototype.setTransactionsbytesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.model.SendBlockTransactionsRequest.prototype.addTransactionsbytes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.SendBlockTransactionsRequest.prototype.clearTransactionsbytesList = function() {
  this.setTransactionsbytesList([]);
};


/**
 * optional bytes SenderPublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.model.SendBlockTransactionsRequest.prototype.getSenderpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes SenderPublicKey = 3;
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {string}
 */
proto.model.SendBlockTransactionsRequest.prototype.getSenderpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderpublickey()));
};


/**
 * optional bytes SenderPublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {!Uint8Array}
 */
proto.model.SendBlockTransactionsRequest.prototype.getSenderpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.SendBlockTransactionsRequest.prototype.setSenderpublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.SendBlockTransactionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendBlockTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendBlockTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendBlockTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchreceiptsList: jspb.Message.toObjectList(msg.getBatchreceiptsList(),
    model_batchReceipt_pb.BatchReceipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendBlockTransactionsResponse}
 */
proto.model.SendBlockTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendBlockTransactionsResponse;
  return proto.model.SendBlockTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendBlockTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendBlockTransactionsResponse}
 */
proto.model.SendBlockTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_batchReceipt_pb.BatchReceipt;
      reader.readMessage(value,model_batchReceipt_pb.BatchReceipt.deserializeBinaryFromReader);
      msg.addBatchreceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendBlockTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendBlockTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendBlockTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchreceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      model_batchReceipt_pb.BatchReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BatchReceipt BatchReceipts = 1;
 * @return {!Array<!proto.model.BatchReceipt>}
 */
proto.model.SendBlockTransactionsResponse.prototype.getBatchreceiptsList = function() {
  return /** @type{!Array<!proto.model.BatchReceipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_batchReceipt_pb.BatchReceipt, 1));
};


/** @param {!Array<!proto.model.BatchReceipt>} value */
proto.model.SendBlockTransactionsResponse.prototype.setBatchreceiptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.BatchReceipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.BatchReceipt}
 */
proto.model.SendBlockTransactionsResponse.prototype.addBatchreceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.BatchReceipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.SendBlockTransactionsResponse.prototype.clearBatchreceiptsList = function() {
  this.setBatchreceiptsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionMinimumFeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionMinimumFeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionMinimumFeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionMinimumFeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionbytes: msg.getTransactionbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionMinimumFeeRequest}
 */
proto.model.GetTransactionMinimumFeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionMinimumFeeRequest;
  return proto.model.GetTransactionMinimumFeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionMinimumFeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionMinimumFeeRequest}
 */
proto.model.GetTransactionMinimumFeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionMinimumFeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionMinimumFeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionMinimumFeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionMinimumFeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes TransactionBytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetTransactionMinimumFeeRequest.prototype.getTransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TransactionBytes = 1;
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {string}
 */
proto.model.GetTransactionMinimumFeeRequest.prototype.getTransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbytes()));
};


/**
 * optional bytes TransactionBytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.GetTransactionMinimumFeeRequest.prototype.getTransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetTransactionMinimumFeeRequest.prototype.setTransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionMinimumFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionMinimumFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionMinimumFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionMinimumFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fee: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionMinimumFeeResponse}
 */
proto.model.GetTransactionMinimumFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionMinimumFeeResponse;
  return proto.model.GetTransactionMinimumFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionMinimumFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionMinimumFeeResponse}
 */
proto.model.GetTransactionMinimumFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionMinimumFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionMinimumFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionMinimumFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionMinimumFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFee();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 Fee = 1;
 * @return {string}
 */
proto.model.GetTransactionMinimumFeeResponse.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetTransactionMinimumFeeResponse.prototype.setFee = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.model.TransactionType = {
  EMPTYTRANSACTION: 0,
  SENDMONEYTRANSACTION: 1,
  NODEREGISTRATIONTRANSACTION: 2,
  UPDATENODEREGISTRATIONTRANSACTION: 258,
  REMOVENODEREGISTRATIONTRANSACTION: 514,
  CLAIMNODEREGISTRATIONTRANSACTION: 770,
  SETUPACCOUNTDATASETTRANSACTION: 3,
  REMOVEACCOUNTDATASETTRANSACTION: 259,
  APPROVALESCROWTRANSACTION: 4,
  MULTISIGNATURETRANSACTION: 5
};

goog.object.extend(exports, proto.model);
